{"version":3,"sources":["components/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["RegistrationForm","props","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","fieldsValue","values","message","loading","then","success","console","log","handleConfirmBlur","value","target","setState","confirmDirty","state","autoCompleteResult","bind","getFieldDecorator","this","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","className","onSubmit","Item","label","rules","required","placeholder","type","initialValue","min","max","extra","gutter","valuePropName","href","htmlType","React","Component","WrappedRegistrationForm","Form","create","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.722bd007.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Form, Input, DatePicker, Row, Col,InputNumber,Checkbox, Button, message,} from 'antd';\r\n\r\n//import { DB_config } from './../Firebase/Fire';\r\n//import firebase from 'firebase/app';\r\n//import 'firebase/database';\r\n\r\n\r\n//const { Option } = Select;\r\n//const AutoCompleteOption = AutoComplete.Option;\r\n\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n  //  this.app = !firebase.apps.length ? firebase.initializeApp(DB_config) : firebase.app();\r\n  //  this.db = this.app.database().ref().child('users');\r\n    this.state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n        //users: []\r\n      };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleConfirmBlur = this.handleConfirmBlur.bind(this);\r\n  }\r\n\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.form.validateFieldsAndScroll((err, fieldsValue) => {\r\n      const values = {\r\n            ...fieldsValue,\r\n          //  'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD')\r\n          };\r\n      if (!err) {\r\n        message.loading('You are submitting a form....', 2.5)\r\n        .then(() =>{\r\n            message.success('Form submitted successfully...', 1.0);\r\n            console.log('Received values of form:', values);\r\n        })\r\n      //  .catch(error => {\r\n      //    this.setState({error});\r\n      //  });\r\n      }\r\n\r\n\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n//    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n\r\n    const config = {\r\n     rules: [{ type: 'object', required: true, message: 'Please select time!' }],\r\n   };\r\n  //<FirebaseContext.Consumer>\r\n  //   {firebase => {\r\n    return (\r\n      <article className=\"mw6 center bg-white shadow-5 br3 pa3 pa4-ns mv3 ba b--black-10\">\r\n          <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n\r\n              <Form.Item {...formItemLayout} label=\"First Name\">\r\n                  {getFieldDecorator('Firstname', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your First name',\r\n                      },\r\n                    ],\r\n                  })(<Input placeholder=\"Please input your Firstname\" />)}\r\n                </Form.Item>\r\n                <Form.Item {...formItemLayout} label=\"Last Name\">\r\n                  {getFieldDecorator('Lastname', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your Lastname',\r\n                      },\r\n                    ],\r\n                  })(<Input placeholder=\"Please input your Lastname\" />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Birthday\">\r\n                  {getFieldDecorator('Birthday', config)(<DatePicker />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Age\">\r\n                  {getFieldDecorator('Age', { initialValue: 1 })(<InputNumber min={1} max={100} />)}\r\n                  <span className=\"ant-form-text\"> Years</span>\r\n                </Form.Item>\r\n                <Form.Item {...formItemLayout} label=\"Hobby\">\r\n                  {getFieldDecorator('Hobby', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your Hobby',\r\n                      },\r\n                    ],\r\n                  })(<Input placeholder=\"Please input your Hobby\" required />)}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n                  <Row gutter={8}>\r\n                    <Col span={12}>\r\n                      {getFieldDecorator('captcha', {\r\n                        rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n                      })(<Input />)}\r\n                    </Col>\r\n                    <Col span={12}>\r\n                      <Button>Get captcha</Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                  {getFieldDecorator('agreement', {\r\n                    rules: [{ required: true, message: 'Please agree to the terms!' }],\r\n                    valuePropName: 'checked',\r\n                  })(\r\n                    <Checkbox>\r\n                      I have read the <a href=\"./../../../public/index.html\">agreement</a>\r\n                    </Checkbox>,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                  </Button>\r\n                </Form.Item>\r\n          </Form>\r\n      </article>\r\n    );\r\n    }}\r\n\r\n\r\n\r\n\r\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n//const Login = Form.create({ name: 'register' })(RegistrationForm);\r\n\r\nexport default WrappedRegistrationForm; //Login\r\n","import React from 'react';\nimport WrappedRegistrationForm from './components/login/Login';\n//import { FirebaseContext } from './components/Firebase';\n\nclass App extends React.Component {\n//const App = ()=>(\n//  <FirebaseContext.Consumer>\n//    {firebase => {\n//    }}\n//  </FirebaseContext.Consumer>);\n  render(){\n      return (\n        <div >\n          <WrappedRegistrationForm />\n        </div>\n      )\n\n\n  }}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport 'tachyons'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import Firebase, { FirebaseContext } from './components/Firebase';\n//<FirebaseContext.Provider value={new Firebase()}>\n//  </FirebaseContext.Provider>,\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}